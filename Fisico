CREATE TABLE medico(
    id_medico INT IDENTITY(1,1) NOT NULL,
    CRM VARCHAR(10) NOT NULL,
    espec VARCHAR(100) NOT NULL,
    PRIMARY KEY(id_medico)
);

CREATE TABLE plano_saude(
    id_plano INT IDENTITY(1,1) NOT NULL,
    nome_plano VARCHAR(20) NOT NULL,
    corbertura VARCHAR(20) NOT NULL,
    mesalidade DECIMAL(10,2) NOT NULL,
    PRIMARY KEY(id_plano)
);

CREATE TABLE paciente(
    id_paciente INT IDENTITY(1,1) NOT NULL,
    id_paciente_plano INT, -- FK para plano_saude
    PRIMARY KEY(id_paciente),
    FOREIGN KEY (id_paciente_plano) REFERENCES plano_saude(id_plano)
);

CREATE TABLE recepcionista (
    id_recepcionista INT IDENTITY(1,1) NOT NULL,
    PRIMARY KEY(id_recepcionista)
);

CREATE TABLE consulta(
    id_consulta INT IDENTITY(1,1) NOT NULL,
    data_consulta DATE NOT NULL,
    observacao JSON,
    preco DECIMAL(10,2),
    id_consulta_medico INT, -- Adicionado para a FK
    id_consulta_paciente INT, -- Adicionado para a FK
    id_consulta_recepcionista INT, -- Adicionado para a FK
    PRIMARY KEY(id_consulta),
    FOREIGN KEY (id_consulta_medico) REFERENCES medico(id_medico),
    FOREIGN KEY (id_consulta_paciente) REFERENCES paciente(id_paciente),
    FOREIGN KEY (id_consulta_recepcionista) REFERENCES recepcionista(id_recepcionista)
);

CREATE TABLE participante(
    id_participante INT IDENTITY(1,1) NOT NULL,
    PRIMARY KEY(id_participante)
);

CREATE TABLE localizacao(
    id_localizacao INT IDENTITY(1,1) NOT NULL,
    nome_local VARCHAR(255) NOT NULL,
    capacidade INT NOT NULL,
    PRIMARY KEY(id_localizacao)
);

CREATE TABLE evento(
    id_evento INT IDENTITY(1,1) NOT NULL,
    nome_evento VARCHAR(255) NOT NULL,
    data_inicio DATE NOT NULL,
    data_fim DATE,
    tipo_evento VARCHAR(100) NOT NULL,
    localizacao_evento INT, -- Adicionado para a FK
    PRIMARY KEY(id_evento),
    FOREIGN KEY (localizacao_evento) REFERENCES localizacao(id_localizacao)
);

CREATE TABLE inscricao(
    id_inscricao INT IDENTITY(1,1) NOT NULL,
    data_inscricao DATE NOT NULL,
    preco DECIMAL(10,2) NOT NULL,
    id_inscricao_evento INT, -- Adicionado para a FK
    PRIMARY KEY(id_inscricao),
    FOREIGN KEY (id_inscricao_evento) REFERENCES evento(id_evento)
);

CREATE TABLE client_restaurante(
    id_cliente INT IDENTITY(1,1) NOT NULL,
    PRIMARY KEY(id_cliente)
);

CREATE TABLE mesa (
    id_mesa INT IDENTITY(1,1) NOT NULL,
    capacidade INT NOT NULL,
    PRIMARY KEY(id_mesa)
);

CREATE TABLE pedido (
    id_pedido INT IDENTITY(1,1) NOT NULL,
    data_pedido DATE NOT NULL,
    preco_total DECIMAL(10,2),
    id_pedido_cliente INT, -- Adicionado para a FK
    PRIMARY KEY(id_pedido),
    FOREIGN KEY (id_pedido_cliente) REFERENCES client_restaurante(id_cliente)
);

CREATE TABLE item (
    id_item INT IDENTITY(1,1) NOT NULL,
    descricao VARCHAR(255),
    preco DECIMAL(10,2),
    quantidade INT NOT NULL,
    PRIMARY KEY(id_item)
);

CREATE TABLE para_viagem (
   endereco VARCHAR(255),
   id_para_viagem INT, -- Adicionado para a FK
   FOREIGN KEY (id_para_viagem) REFERENCES pedido(id_pedido)
);

CREATE TABLE consumo_local (
   id_consumo_pedido INT, -- Adicionado para a FK
   id_consumo_mesa INT, -- Adicionado para a FK
   FOREIGN KEY (id_consumo_pedido) REFERENCES pedido(id_pedido),
   FOREIGN KEY (id_consumo_mesa) REFERENCES mesa(id_mesa)
);

CREATE TABLE garcom (
   id_garcom INT IDENTITY(1,1) NOT NULL,
   PRIMARY KEY(id_garcom)
);

CREATE TABLE estabelecimento (
   id_estabelecimento INT IDENTITY(1,1) NOT NULL,
   nome VARCHAR(255),
   setor INT NOT NULL,
   PRIMARY KEY(id_estabelecimento)
);

CREATE TABLE funcionario (
   id_funcionario INT IDENTITY(1,1) NOT NULL,
   salario DECIMAL(10,2) NOT NULL,
   setor INT NOT NULL,
   status BOOLEAN,
   id_estabelecimento_func INT, -- Adicionado para a FK
   PRIMARY KEY(id_funcionario),
   FOREIGN KEY (id_estabelecimento_func) REFERENCES estabelecimento(id_estabelecimento)
);

CREATE TABLE cliente (
   data_da_ultima_visita DATE NOT NULL,
   pontos INT NOT NULL
);

CREATE TABLE registro (
   nome VARCHAR(255) NOT NULL,
   data_de_nascimento DATE NOT NULL,
   CPF VARCHAR(11) NOT NULL,
   email VARCHAR(255) NOT NULL,
   telefone VARCHAR(11) NOT NULL,
   PRIMARY KEY(CPF)
);

CREATE TABLE agendar_consulta (
   fk_recepcionista_id_recepcionista INT,
   fk_paciente_id_paciente INT,
   FOREIGN KEY(fk_recepcionista_id_recepcionista) REFERENCES recepcionista(id_recepcionista),
   FOREIGN KEY(fk_paciente_id_paciente) REFERENCES paciente(id_paciente)
);

CREATE TABLE inscrever_se (
   fk_participante_id_participante INT,
   fk_inscricao_id_inscricao INT,
   FOREIGN KEY(fk_participante_id_participante) REFERENCES participante(id_participante),
   FOREIGN KEY(fk_inscricao_id_inscricao) REFERENCES inscricao(id_inscricao)
);

CREATE TABLE senta (
   fk_mesa_id_mesa INT,
   fk_cliente_restaurante_id_cliente INT,
   FOREIGN KEY(fk_mesa_id_mesa) REFERENCES mesa(id_mesa),
   FOREIGN KEY(fk_cliente_restaurante_id_cliente) REFERENCES client_restaurante(id_cliente)
);

CREATE TABLE compoe (
   fk_item_id_item INT,
   fk_pedido_id_pedido INT,
   FOREIGN KEY(fk_item_id_item) REFERENCES item(id_item),
   FOREIGN KEY(fk_pedido_id_pedido) REFERENCES pedido(id_pedido)
);

CREATE TABLE atende (
   fk_garcom_id_garcom INT,
   fk_mesa_id_mesa INT,
   FOREIGN KEY(fk_garcom_id_garcom) REFERENCES garcom(id_garcom),
   FOREIGN KEY(fk_mesa_id_mesa) REFERENCES mesa(id_mesa)
);

-- Quais são os planos de saúde mais cogitados?

SELECT 
    ps.nome_plano, ps.corbertura, COUNT(p.id_paciente) AS total_pacientes
FROM 
    plano_saude AS ps
LEFT JOIN 
    paciente AS p ON ps.id_plano = p.id_paciente_plano
GROUP BY 
    ps.id_plano, ps.nome_plano, ps.corbertura
ORDER BY 
    total_pacientes DESC;



-- Quais são os pedidos que mais saem para viagem?

SELECT 
    i.descricao,
    COUNT(c.fk_item_id_item) AS quantidade_pedidos_para_viagem
FROM 
    item AS i 

JOIN compoe AS c ON i.id_item = c.fk_item_id_item 

JOIN para_viagem AS pv ON c.fk_pedido_id_pedido = pv.id_para_viagem

GROUP BY 
    i.id_item, i.descricao
ORDER BY 
    quantidade_pedidos_para_viagem DESC;

-- As comidas saem mais em dias de eventos são diferentes dos dias que não tem eventos?

WITH PedidosEventos AS (
    SELECT 
        p.id_pedido,
        i.descricao,
        e.id_evento IS NOT NULL AS dia_evento
    FROM 
        pedido AS p
    LEFT JOIN 
        compoe AS c ON p.id_pedido = c.fk_pedido_id_pedido
    LEFT JOIN 
        item AS i ON c.fk_item_id_item = i.id_item
    LEFT JOIN 
        evento AS e ON p.data_pedido BETWEEN e.data_inicio AND e.data_fim
)

SELECT 
    descricao,
    dia_evento,
    COUNT(*) AS quantidade_vendida
FROM 
    PedidosEventos
GROUP BY 
    descricao, dia_evento
ORDER BY 
    quantidade_vendida DESC, descricao;

